name: Deploy Nginx App with Helm

on:
  push:
    branches: [ "main", "01_DockerTest" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: self-hosted 
    permissions:
      contents: read
      packages: write # needed for pushing container registry

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Define Image Repository and Set Tag Format
        id: set_image_repo
        shell: powershell
        run: |
          $IMAGE_REPO = "daymonp/hello-world-nginx"  # Replace with actual username
          $IMAGE_TAG = "${{ github.sha }}"  # Ensures correct SHA formatting
          
          Add-Content -Path $env:GITHUB_ENV -Value "IMAGE_REPO=$IMAGE_REPO"
          Add-Content -Path $env:GITHUB_ENV -Value "IMAGE_TAG=$IMAGE_TAG"

          Write-Output "Using repository: ${IMAGE_REPO}"
          Write-Output "Latest Tag: ${IMAGE_REPO}:latest"
          Write-Output "SHA Tag: ${IMAGE_REPO}:${IMAGE_TAG}"

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true  # needed to push to dockerhub
          tags: |
            ${{ env.IMAGE_REPO }}:latest
            ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}

      - name: Configure Kubeconfig
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Create Kubernetes Namespace (if it doesn't exist)
        run: |
          $namespaceExists = kubectl get namespace default --no-headers -o custom-columns=":metadata.name"
          if ($namespaceExists -ne "default") {
              kubectl create namespace default
          } else {
              Write-Output "Namespace 'default' already exists, skipping creation."
          }

      - name: Uninstall Existing Helm Release (if exists)
        shell: powershell
        run: |
          $releaseExists = helm list -q | Select-String "my-hello-nginx"
          if ($releaseExists) {
              helm uninstall my-hello-nginx
              Write-Output "Previous Helm release removed."
          } else {
              Write-Output "No existing Helm release found, skipping uninstall."
          }

      - name: Verify Helm Chart Path
        shell: powershell
        run: |
          if (!(Test-Path "$(pwd)/my-nginx-chart/Chart.yaml")) {
              Write-Output "Helm chart directory not found! Ensure 'my-nginx-chart' exists in the repo."
              exit 1
          }

      - name: Install/Upgrade Helm Chart
        run: helm upgrade --install my-hello-nginx "$(pwd)/my-nginx-chart" --namespace default --atomic --wait
        env:
          DOCKER_IMAGE_REPO: ${{ env.IMAGE_REPO }}
          DOCKER_IMAGE_TAG: ${{ env.IMAGE_TAG }}

      - name: Test the final result (Optional - for validation)
        run: |
          Write-Output "Deployment initiated. Waiting for Pods to be ready..."
          kubectl get pods -n default -l app.kubernetes.io/instance=my-hello-nginx --field-selector=status.phase=Running --timeout=120s
          Write-Output "Pods are running. Attempting to get pod name and check logs..."

          # this is how to get podname in powershell
          $POD_NAME = kubectl get pods -n default -l app.kubernetes.io/instance=my-hello-nginx -o jsonpath="{.items[0].metadata.name}"
          Write-Output "Pod name: $POD_NAME"

          Write-Output "Checking Nginx logs for a successful request..."
          $nginxLogs = kubectl logs $POD_NAME -n default
          if ($nginxLogs -match "GET / ") {
            Write-Output "Nginx served content as expected based on logs!"
          } else {
            Write-Output "Nginx log check failed or 'GET / ' entry not found."
            exit 1
          }
