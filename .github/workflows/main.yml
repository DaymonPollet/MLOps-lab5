name: Deploy Nginx App with Helm

on:
  push:
    branches: [ "main", "01_DockerTest" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: self-hosted # Ensure Docker and Helm are installed
    permissions:
      contents: read
      packages: write # Required for pushing container registry

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Docker setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Set the image repository directly in a step
      - name: Define Image Repository and Set Tag Format
        id: set_image_repo
        run: |
          echo "IMAGE_REPO=daymonp/hello-world-nginx" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          echo "Latest Tag: daymonp/hello-world-nginx:latest"
          echo "SHA Tag: daymonp/hello-world-nginx:${{ github.sha }}"

      # Build and Push Docker image
      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true  # Ensures the image is pushed to Docker Hub
          tags: |
            ${{ env.IMAGE_REPO }}:latest
            ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}

      # Kubernetes Helm deployment
      - name: Configure Kubeconfig
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Create Kubernetes Namespace (if it doesn't exist)
        run: |
          kubectl get namespace default || kubectl create namespace default

      - name: Install/Upgrade Helm Chart
        run: |
          helm upgrade --install my-hello-nginx ./my-nginx-chart \
            --namespace default \
            --set image.repository=${{ env.IMAGE_REPO }} \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --atomic \
            --wait
        env:
          DOCKER_IMAGE_REPO: ${{ env.IMAGE_REPO }}
          DOCKER_IMAGE_TAG: ${{ env.IMAGE_TAG }}

      - name: Test the final result (Optional - for validation)
        run: |
          echo "Deployment initiated. Waiting for Pods to be ready..."
          kubectl get pods -n default -l app.kubernetes.io/instance=my-hello-nginx --field-selector=status.phase=Running --timeout=120s
          echo "Pods are running. Attempting to get pod name and check logs..."

          # Get the pod name (using `kubectl` commands instead of PowerShell)
          POD_NAME=$(kubectl get pods -n default -l app.kubernetes.io/instance=my-hello-nginx -o jsonpath='{.items[0].metadata.name}')
          echo "Pod name: $POD_NAME"

          echo "Checking Nginx logs for a successful request..."
          kubectl logs $POD_NAME -n default | grep "GET / "
          if [ $? -eq 0 ]; then
            echo "Nginx served content as expected based on logs!"
          else
            echo "Nginx log check failed or 'GET / ' entry not found."
            exit 1
          fi
